// Generated by CoffeeScript 1.7.1
(function() {
  var SakuraScriptPlayer,
    __slice = [].slice;

  SakuraScriptPlayer = (function() {
    function SakuraScriptPlayer(named) {
      this.named = named;
      this.playing = false;
      this.breakTid = 0;
      this.timeCritical = false;
    }

    SakuraScriptPlayer.prototype.play = function(script, callback) {
      var recur, tags;
      if (callback == null) {
        callback = function() {};
      }
      if (this.playing && this.timeCritical) {
        setTimeout(function() {
          return callback(true);
        });
        return;
      }
      this["break"]();
      this.playing = true;
      this.timeCritical = false;
      this.quick = false;
      tags = [
        {
          re: /^\\[h0]/,
          match: function(group) {
            return this.named.scope(0).blimp(0);
          }
        }, {
          re: /^\\[u1]/,
          match: function(group) {
            return this.named.scope(1).blimp(0);
          }
        }, {
          re: /^\\p\[(\d+)\]/,
          match: function(group) {
            return this.named.scope(Number(group[1]));
          }
        }, {
          re: /^\\p(\d)/,
          match: function(group) {
            return this.named.scope(Number(group[1]));
          }
        }, {
          re: /^\\s(\d)/,
          match: function(group) {
            return this.named.scope().surface(Number(group[1]));
          }
        }, {
          re: /^\\s\[([^\]]+)\]/,
          match: function(group) {
            return this.named.scope().surface(Number(group[1]));
          }
        }, {
          re: /^\\b(\d)/,
          match: function(group) {
            return this.named.scope().blimp(Number(group[1]));
          }
        }, {
          re: /^\\b\[([^\]]+)\]/,
          match: function(group) {
            return this.named.scope().blimp(Number(group[1]));
          }
        }, {
          re: /^\\i(\d)/,
          match: function(group) {
            return this.named.scope().surface().playAnimation(Number(group[1]));
          }
        }, {
          re: /^\\i\[(\d+)\]/,
          match: function(group) {
            return this.named.scope().surface().playAnimation(Number(group[1]));
          }
        }, {
          re: /^\\w(\d+)/,
          match: function(group) {
            return this.wait = Number(group[1]) * 100;
          }
        }, {
          re: /^\\\_w\[(\d+)\]/,
          match: function(group) {
            return this.wait = Number(group[1]);
          }
        }, {
          re: /^\\\_q/,
          match: function(group) {
            return this.quick = !this.quick;
          }
        }, {
          re: /^\\t/,
          match: function(group) {
            return this.timeCritical = true;
          }
        }, {
          re: /^\\q\[([^\]]+)\]/,
          match: function(group) {
            var id, title, _ref;
            _ref = group[1].split(",", 2), title = _ref[0], id = _ref[1];
            return this.named.scope().blimp().choice(title, id);
          }
        }, {
          re: /^\\_a\[([^\]]+)\]/,
          match: function(group) {
            return this.named.scope().blimp().anchorBegin(group[1]);
          }
        }, {
          re: /^\\_a/,
          match: function(group) {
            return this.named.scope().blimp().anchorEnd();
          }
        }, {
          re: /^\\n\[half\]/,
          match: function(group) {
            return this.named.scope().blimp().br();
          }
        }, {
          re: /^\\n/,
          match: function(group) {
            return this.named.scope().blimp().br();
          }
        }, {
          re: /^\\c/,
          match: function(group) {
            return this.named.scope().blimp().clear();
          }
        }, {
          re: /^\\e/,
          match: function(group) {
            this.playing = false;
            return this.named.scopes.forEach(function(scope) {
              var _ref;
              return (_ref = scope.surface()) != null ? _ref.yenE() : void 0;
            });
          }
        }, {
          re: /^\\\\/,
          match: function(group) {
            return this.named.scope().blimp().talk("\\");
          }
        }, {
          re: /^\\\!\[\s*open\s*\,\s*communicatebox\s*\]/,
          match: function(group) {
            return setTimeout(((function(_this) {
              return function() {
                return _this.named.openCommunicateBox();
              };
            })(this)), 2000);
          }
        }, {
          re: /^\\\!\[\s*open\s*\,\s*inputbox\s*\,([^\]]+)\]/,
          match: function(group) {
            return setTimeout(((function(_this) {
              return function() {
                return _this.named.openInputBox(group[1].split(/\s*\,\s*/)[0]);
              };
            })(this)), 2000);
          }
        }, {
          re: /^\\[45Cx67+v8]/,
          match: function(group) {
            return this.named.scope().blimp().talk(group[0]);
          }
        }, {
          re: /^\\!\[.*?\]/,
          match: function(group) {
            return this.named.scope().blimp().talk(group[0]);
          }
        }, {
          re: /^./,
          match: function(group) {
            return this.named.scope().blimp().talk(group[0]);
          }
        }
      ];
      (recur = (function(_this) {
        return function() {
          var tag, _i, _len;
          if (script.length === 0) {
            _this.playing = false;
          }
          if (!_this.playing) {
            _this.breakTid = setTimeout((function() {
              return _this["break"]();
            }), 10000);
            return;
          }
          _this.wait = 80;
          for (_i = 0, _len = tags.length; _i < _len; _i++) {
            tag = tags[_i];
            if (tag.re.test(script)) {
              script = script.replace(tag.re, function() {
                var all, group, offset, _j;
                group = 3 <= arguments.length ? __slice.call(arguments, 0, _j = arguments.length - 2) : (_j = 0, []), offset = arguments[_j++], all = arguments[_j++];
                tag.match.call(_this, group);
                return '';
              });
              break;
            }
          }
          return _this.breakTid = setTimeout(recur, _this.quick ? 0 : _this.wait);
        };
      })(this))();
      return void 0;
    };

    SakuraScriptPlayer.prototype["break"] = function() {
      this.playing = false;
      this.timeCritical = false;
      clearTimeout(this.breakTid);
      this.named.scopes.forEach(function(scope) {
        return scope.blimp(-1).clear();
      });
      return void 0;
    };

    return SakuraScriptPlayer;

  })();

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = SakuraScriptPlayer;
  } else if (this.Ikagaka != null) {
    this.Ikagaka.SakuraScriptPlayer = SakuraScriptPlayer;
  } else {
    this.SakuraScriptPlayer = SakuraScriptPlayer;
  }

}).call(this);
